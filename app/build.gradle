apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'spoon'
apply plugin: 'findbugs'

apply from: '../config/findbugs.gradle'
apply from: '../config/pmd.gradle'
apply from: '../config/jacoco.gradle'
apply from: '../config/checkstyle.gradle'

apply from: '../dependency.gradle'

android {
    compileSdkVersion versions.androidCompileSdk
    buildToolsVersion versions.androidBuildTools

    defaultConfig {
        final String packageName = "com.dmallcott.photoinspiration"

        applicationId packageName
        minSdkVersion versions.androidMinSdk
        targetSdkVersion versions.androidTargetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner packageName + ".application.ApplicationTestRunner"

        buildConfigField "String", "PEXELS_API_KEY", getProperties("api.properties")["PEXELS_API_KEY"]
    }

    compileOptions {
        sourceCompatibility versions.sourceCompatibilityVersion
        targetCompatibility versions.targetCompatibilityVersion
    }

    signingConfigs {
        final keystoreProperties = getProperties("keystore.properties")

        debug {
            storeFile file(keystoreProperties["DEBUG_KEYSTORE_FILE"])
            storePassword keystoreProperties["DEBUG_KEYSTORE_PASSWORD"]
            keyAlias keystoreProperties["DEBUG_KEY_ALIAS"]
            keyPassword keystoreProperties["DEBUG_KEY_PASSWORD"]
        }
        release {
            storeFile file(keystoreProperties["RELEASE_KEYSTORE_FILE"])
            storePassword keystoreProperties["RELEASE_KEYSTORE_PASSWORD"]
            keyAlias keystoreProperties["RELEASE_KEY_ALIAS"]
            keyPassword keystoreProperties["RELEASE_KEY_PASSWORD"]
        }
    }

    buildTypes {
        debug {
            versionNameSuffix " Debug"
            applicationIdSuffix ".debug"

            debuggable true
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    configurations.all {
        resolutionStrategy {
            force 'org.objenesis:objenesis:2.2' // Required for PaperDb
        }
    }

    // Required for RxJava 1 and 2 coexistence
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    // Support Libraries
    compile "com.android.support:appcompat-v7:$versions.androidSupportLibrary"
    compile "com.android.support:design:$versions.androidSupportLibrary"
    compile "com.android.support:recyclerview-v7:$versions.androidSupportLibrary"

    // Dagger
    compile "com.google.dagger:dagger:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"

    // RxStuff
    compile "io.reactivex.rxjava2:rxjava:$versions.rxJava"
    compile "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
    compile "com.github.akarnokd:rxjava2-interop:$versions.rxJavaInterop"
    compile "nl.littlerobots.rxlint:rxlint:$versions.rxLint"
    compile "com.jakewharton.rxbinding:rxbinding:$versions.rxBinding"

    // AutoValue
    provided "com.google.auto.value:auto-value:$versions.autoValue"
    annotationProcessor "com.google.auto.value:auto-value:$versions.autoValue"
    provided "com.ryanharter.auto.value:auto-value-gson:$versions.autoValueGson"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$versions.autoValueGson"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$versions.autoValueParcelable"

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"

    // Gson
    compile "com.google.code.gson:gson:$versions.gson"

    // Jake Wharton
    compile "com.jakewharton.timber:timber:$versions.timber"
    compile "com.jakewharton:butterknife:$versions.butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$versions.butterknife"

    // Square
    compile "com.squareup.picasso:picasso:$versions.picasso"
    compile "com.squareup.retrofit2:retrofit:$versions.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$versions.retrofitRxJavaAdapter"
    compile "com.squareup.okhttp3:okhttp:$versions.okhttp"
    compile "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    // Storage
    compile "com.google.firebase:firebase-core:$versions.firebase"
    compile "io.paperdb:paperdb:$versions.paperdb"

    // Testing
    testCompile "junit:junit:$versions.jUnit"
    testCompile "org.mockito:mockito-core:$versions.mockito"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$versions.espresso") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "com.squareup.spoon:spoon-client:$versions.spoon"
}

spoon {
    debug = true
    sequential = true
    grantAllPermissions = true
}

dexcount {
    format = "list"
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = true
    orderByMethodCount = false
    verbose = false
    maxTreeDepth = Integer.MAX_VALUE
    runOnEachAssemble = false
}

def getProperties(String propertiesFileName) {
    def propertiesFile = rootProject.file(propertiesFileName);
    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return properties
}